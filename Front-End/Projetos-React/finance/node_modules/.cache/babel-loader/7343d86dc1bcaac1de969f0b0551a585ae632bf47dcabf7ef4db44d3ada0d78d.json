{"ast":null,"code":"var createObject = Object.create;\nfunction createMap() {\n  var map = createObject(null);\n  map[\"__\"] = undefined;\n  delete map[\"__\"];\n  return map;\n}\nvar Target = function Target(path, matcher, delegate) {\n  this.path = path;\n  this.matcher = matcher;\n  this.delegate = delegate;\n};\nTarget.prototype.to = function to(target, callback) {\n  var delegate = this.delegate;\n  if (delegate && delegate.willAddRoute) {\n    target = delegate.willAddRoute(this.matcher.target, target);\n  }\n  this.matcher.add(this.path, target);\n  if (callback) {\n    if (callback.length === 0) {\n      throw new Error(\"You must have an argument in the function passed to `to`\");\n    }\n    this.matcher.addChild(this.path, target, callback, this.delegate);\n  }\n};\nvar Matcher = function Matcher(target) {\n  this.routes = createMap();\n  this.children = createMap();\n  this.target = target;\n};\nMatcher.prototype.add = function add(path, target) {\n  this.routes[path] = target;\n};\nMatcher.prototype.addChild = function addChild(path, target, callback, delegate) {\n  var matcher = new Matcher(target);\n  this.children[path] = matcher;\n  var match = generateMatch(path, matcher, delegate);\n  if (delegate && delegate.contextEntered) {\n    delegate.contextEntered(target, match);\n  }\n  callback(match);\n};\nfunction generateMatch(startingPath, matcher, delegate) {\n  function match(path, callback) {\n    var fullPath = startingPath + path;\n    if (callback) {\n      callback(generateMatch(fullPath, matcher, delegate));\n    } else {\n      return new Target(fullPath, matcher, delegate);\n    }\n  }\n  return match;\n}\nfunction addRoute(routeArray, path, handler) {\n  var len = 0;\n  for (var i = 0; i < routeArray.length; i++) {\n    len += routeArray[i].path.length;\n  }\n  path = path.substr(len);\n  var route = {\n    path: path,\n    handler: handler\n  };\n  routeArray.push(route);\n}\nfunction eachRoute(baseRoute, matcher, callback, binding) {\n  var routes = matcher.routes;\n  var paths = Object.keys(routes);\n  for (var i = 0; i < paths.length; i++) {\n    var path = paths[i];\n    var routeArray = baseRoute.slice();\n    addRoute(routeArray, path, routes[path]);\n    var nested = matcher.children[path];\n    if (nested) {\n      eachRoute(routeArray, nested, callback, binding);\n    } else {\n      callback.call(binding, routeArray);\n    }\n  }\n}\nvar map = function map(callback, addRouteCallback) {\n  var matcher = new Matcher();\n  callback(generateMatch(\"\", matcher, this.delegate));\n  eachRoute([], matcher, function (routes) {\n    if (addRouteCallback) {\n      addRouteCallback(this, routes);\n    } else {\n      this.add(routes);\n    }\n  }, this);\n};\n\n// Normalizes percent-encoded values in `path` to upper-case and decodes percent-encoded\n// values that are not reserved (i.e., unicode characters, emoji, etc). The reserved\n// chars are \"/\" and \"%\".\n// Safe to call multiple times on the same path.\n// Normalizes percent-encoded values in `path` to upper-case and decodes percent-encoded\nfunction normalizePath(path) {\n  return path.split(\"/\").map(normalizeSegment).join(\"/\");\n}\n// We want to ensure the characters \"%\" and \"/\" remain in percent-encoded\n// form when normalizing paths, so replace them with their encoded form after\n// decoding the rest of the path\nvar SEGMENT_RESERVED_CHARS = /%|\\//g;\nfunction normalizeSegment(segment) {\n  if (segment.length < 3 || segment.indexOf(\"%\") === -1) {\n    return segment;\n  }\n  return decodeURIComponent(segment).replace(SEGMENT_RESERVED_CHARS, encodeURIComponent);\n}\n// We do not want to encode these characters when generating dynamic path segments\n// See https://tools.ietf.org/html/rfc3986#section-3.3\n// sub-delims: \"!\", \"$\", \"&\", \"'\", \"(\", \")\", \"*\", \"+\", \",\", \";\", \"=\"\n// others allowed by RFC 3986: \":\", \"@\"\n//\n// First encode the entire path segment, then decode any of the encoded special chars.\n//\n// The chars \"!\", \"'\", \"(\", \")\", \"*\" do not get changed by `encodeURIComponent`,\n// so the possible encoded chars are:\n// ['%24', '%26', '%2B', '%2C', '%3B', '%3D', '%3A', '%40'].\nvar PATH_SEGMENT_ENCODINGS = /%(?:2(?:4|6|B|C)|3(?:B|D|A)|40)/g;\nfunction encodePathSegment(str) {\n  return encodeURIComponent(str).replace(PATH_SEGMENT_ENCODINGS, decodeURIComponent);\n}\nvar escapeRegex = /(\\/|\\.|\\*|\\+|\\?|\\||\\(|\\)|\\[|\\]|\\{|\\}|\\\\)/g;\nvar isArray = Array.isArray;\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nfunction getParam(params, key) {\n  if (typeof params !== \"object\" || params === null) {\n    throw new Error(\"You must pass an object as the second argument to `generate`.\");\n  }\n  if (!hasOwnProperty.call(params, key)) {\n    throw new Error(\"You must provide param `\" + key + \"` to `generate`.\");\n  }\n  var value = params[key];\n  var str = typeof value === \"string\" ? value : \"\" + value;\n  if (str.length === 0) {\n    throw new Error(\"You must provide a param `\" + key + \"`.\");\n  }\n  return str;\n}\nvar eachChar = [];\neachChar[0 /* Static */] = function (segment, currentState) {\n  var state = currentState;\n  var value = segment.value;\n  for (var i = 0; i < value.length; i++) {\n    var ch = value.charCodeAt(i);\n    state = state.put(ch, false, false);\n  }\n  return state;\n};\neachChar[1 /* Dynamic */] = function (_, currentState) {\n  return currentState.put(47 /* SLASH */, true, true);\n};\neachChar[2 /* Star */] = function (_, currentState) {\n  return currentState.put(-1 /* ANY */, false, true);\n};\neachChar[4 /* Epsilon */] = function (_, currentState) {\n  return currentState;\n};\nvar regex = [];\nregex[0 /* Static */] = function (segment) {\n  return segment.value.replace(escapeRegex, \"\\\\$1\");\n};\nregex[1 /* Dynamic */] = function () {\n  return \"([^/]+)\";\n};\nregex[2 /* Star */] = function () {\n  return \"(.+)\";\n};\nregex[4 /* Epsilon */] = function () {\n  return \"\";\n};\nvar generate = [];\ngenerate[0 /* Static */] = function (segment) {\n  return segment.value;\n};\ngenerate[1 /* Dynamic */] = function (segment, params) {\n  var value = getParam(params, segment.value);\n  if (RouteRecognizer.ENCODE_AND_DECODE_PATH_SEGMENTS) {\n    return encodePathSegment(value);\n  } else {\n    return value;\n  }\n};\ngenerate[2 /* Star */] = function (segment, params) {\n  return getParam(params, segment.value);\n};\ngenerate[4 /* Epsilon */] = function () {\n  return \"\";\n};\nvar EmptyObject = Object.freeze({});\nvar EmptyArray = Object.freeze([]);\n// The `names` will be populated with the paramter name for each dynamic/star\n// segment. `shouldDecodes` will be populated with a boolean for each dyanamic/star\n// segment, indicating whether it should be decoded during recognition.\nfunction parse(segments, route, types) {\n  // normalize route as not starting with a \"/\". Recognition will\n  // also normalize.\n  if (route.length > 0 && route.charCodeAt(0) === 47 /* SLASH */) {\n    route = route.substr(1);\n  }\n  var parts = route.split(\"/\");\n  var names = undefined;\n  var shouldDecodes = undefined;\n  for (var i = 0; i < parts.length; i++) {\n    var part = parts[i];\n    var flags = 0;\n    var type = 0;\n    if (part === \"\") {\n      type = 4 /* Epsilon */;\n    } else if (part.charCodeAt(0) === 58 /* COLON */) {\n      type = 1 /* Dynamic */;\n    } else if (part.charCodeAt(0) === 42 /* STAR */) {\n      type = 2 /* Star */;\n    } else {\n      type = 0 /* Static */;\n    }\n\n    flags = 2 << type;\n    if (flags & 12 /* Named */) {\n      part = part.slice(1);\n      names = names || [];\n      names.push(part);\n      shouldDecodes = shouldDecodes || [];\n      shouldDecodes.push((flags & 4 /* Decoded */) !== 0);\n    }\n    if (flags & 14 /* Counted */) {\n      types[type]++;\n    }\n    segments.push({\n      type: type,\n      value: normalizeSegment(part)\n    });\n  }\n  return {\n    names: names || EmptyArray,\n    shouldDecodes: shouldDecodes || EmptyArray\n  };\n}\nfunction isEqualCharSpec(spec, char, negate) {\n  return spec.char === char && spec.negate === negate;\n}\n// A State has a character specification and (`charSpec`) and a list of possible\n// subsequent states (`nextStates`).\n//\n// If a State is an accepting state, it will also have several additional\n// properties:\n//\n// * `regex`: A regular expression that is used to extract parameters from paths\n//   that reached this accepting state.\n// * `handlers`: Information on how to convert the list of captures into calls\n//   to registered handlers with the specified parameters\n// * `types`: How many static, dynamic or star segments in this route. Used to\n//   decide which route to use if multiple registered routes match a path.\n//\n// Currently, State is implemented naively by looping over `nextStates` and\n// comparing a character specification against a character. A more efficient\n// implementation would use a hash of keys pointing at one or more next states.\nvar State = function State(states, id, char, negate, repeat) {\n  this.states = states;\n  this.id = id;\n  this.char = char;\n  this.negate = negate;\n  this.nextStates = repeat ? id : null;\n  this.pattern = \"\";\n  this._regex = undefined;\n  this.handlers = undefined;\n  this.types = undefined;\n};\nState.prototype.regex = function regex$1() {\n  if (!this._regex) {\n    this._regex = new RegExp(this.pattern);\n  }\n  return this._regex;\n};\nState.prototype.get = function get(char, negate) {\n  var this$1 = this;\n  var nextStates = this.nextStates;\n  if (nextStates === null) {\n    return;\n  }\n  if (isArray(nextStates)) {\n    for (var i = 0; i < nextStates.length; i++) {\n      var child = this$1.states[nextStates[i]];\n      if (isEqualCharSpec(child, char, negate)) {\n        return child;\n      }\n    }\n  } else {\n    var child$1 = this.states[nextStates];\n    if (isEqualCharSpec(child$1, char, negate)) {\n      return child$1;\n    }\n  }\n};\nState.prototype.put = function put(char, negate, repeat) {\n  var state;\n  // If the character specification already exists in a child of the current\n  // state, just return that state.\n  if (state = this.get(char, negate)) {\n    return state;\n  }\n  // Make a new state for the character spec\n  var states = this.states;\n  state = new State(states, states.length, char, negate, repeat);\n  states[states.length] = state;\n  // Insert the new state as a child of the current state\n  if (this.nextStates == null) {\n    this.nextStates = state.id;\n  } else if (isArray(this.nextStates)) {\n    this.nextStates.push(state.id);\n  } else {\n    this.nextStates = [this.nextStates, state.id];\n  }\n  // Return the new state\n  return state;\n};\n// Find a list of child states matching the next character\nState.prototype.match = function match(ch) {\n  var this$1 = this;\n  var nextStates = this.nextStates;\n  if (!nextStates) {\n    return [];\n  }\n  var returned = [];\n  if (isArray(nextStates)) {\n    for (var i = 0; i < nextStates.length; i++) {\n      var child = this$1.states[nextStates[i]];\n      if (isMatch(child, ch)) {\n        returned.push(child);\n      }\n    }\n  } else {\n    var child$1 = this.states[nextStates];\n    if (isMatch(child$1, ch)) {\n      returned.push(child$1);\n    }\n  }\n  return returned;\n};\nfunction isMatch(spec, char) {\n  return spec.negate ? spec.char !== char && spec.char !== -1 /* ANY */ : spec.char === char || spec.char === -1 /* ANY */;\n}\n// This is a somewhat naive strategy, but should work in a lot of cases\n// A better strategy would properly resolve /posts/:id/new and /posts/edit/:id.\n//\n// This strategy generally prefers more static and less dynamic matching.\n// Specifically, it\n//\n//  * prefers fewer stars to more, then\n//  * prefers using stars for less of the match to more, then\n//  * prefers fewer dynamic segments to more, then\n//  * prefers more static segments to more\nfunction sortSolutions(states) {\n  return states.sort(function (a, b) {\n    var ref = a.types || [0, 0, 0];\n    var astatics = ref[0];\n    var adynamics = ref[1];\n    var astars = ref[2];\n    var ref$1 = b.types || [0, 0, 0];\n    var bstatics = ref$1[0];\n    var bdynamics = ref$1[1];\n    var bstars = ref$1[2];\n    if (astars !== bstars) {\n      return astars - bstars;\n    }\n    if (astars) {\n      if (astatics !== bstatics) {\n        return bstatics - astatics;\n      }\n      if (adynamics !== bdynamics) {\n        return bdynamics - adynamics;\n      }\n    }\n    if (adynamics !== bdynamics) {\n      return adynamics - bdynamics;\n    }\n    if (astatics !== bstatics) {\n      return bstatics - astatics;\n    }\n    return 0;\n  });\n}\nfunction recognizeChar(states, ch) {\n  var nextStates = [];\n  for (var i = 0, l = states.length; i < l; i++) {\n    var state = states[i];\n    nextStates = nextStates.concat(state.match(ch));\n  }\n  return nextStates;\n}\nvar RecognizeResults = function RecognizeResults(queryParams) {\n  this.length = 0;\n  this.queryParams = queryParams || {};\n};\nRecognizeResults.prototype.splice = Array.prototype.splice;\nRecognizeResults.prototype.slice = Array.prototype.slice;\nRecognizeResults.prototype.push = Array.prototype.push;\nfunction findHandler(state, originalPath, queryParams) {\n  var handlers = state.handlers;\n  var regex = state.regex();\n  if (!regex || !handlers) {\n    throw new Error(\"state not initialized\");\n  }\n  var captures = originalPath.match(regex);\n  var currentCapture = 1;\n  var result = new RecognizeResults(queryParams);\n  result.length = handlers.length;\n  for (var i = 0; i < handlers.length; i++) {\n    var handler = handlers[i];\n    var names = handler.names;\n    var shouldDecodes = handler.shouldDecodes;\n    var params = EmptyObject;\n    var isDynamic = false;\n    if (names !== EmptyArray && shouldDecodes !== EmptyArray) {\n      for (var j = 0; j < names.length; j++) {\n        isDynamic = true;\n        var name = names[j];\n        var capture = captures && captures[currentCapture++];\n        if (params === EmptyObject) {\n          params = {};\n        }\n        if (RouteRecognizer.ENCODE_AND_DECODE_PATH_SEGMENTS && shouldDecodes[j]) {\n          params[name] = capture && decodeURIComponent(capture);\n        } else {\n          params[name] = capture;\n        }\n      }\n    }\n    result[i] = {\n      handler: handler.handler,\n      params: params,\n      isDynamic: isDynamic\n    };\n  }\n  return result;\n}\nfunction decodeQueryParamPart(part) {\n  // http://www.w3.org/TR/html401/interact/forms.html#h-17.13.4.1\n  part = part.replace(/\\+/gm, \"%20\");\n  var result;\n  try {\n    result = decodeURIComponent(part);\n  } catch (error) {\n    result = \"\";\n  }\n  return result;\n}\nvar RouteRecognizer = function RouteRecognizer() {\n  this.names = createMap();\n  var states = [];\n  var state = new State(states, 0, -1 /* ANY */, true, false);\n  states[0] = state;\n  this.states = states;\n  this.rootState = state;\n};\nRouteRecognizer.prototype.add = function add(routes, options) {\n  var currentState = this.rootState;\n  var pattern = \"^\";\n  var types = [0, 0, 0];\n  var handlers = new Array(routes.length);\n  var allSegments = [];\n  var isEmpty = true;\n  var j = 0;\n  for (var i = 0; i < routes.length; i++) {\n    var route = routes[i];\n    var ref = parse(allSegments, route.path, types);\n    var names = ref.names;\n    var shouldDecodes = ref.shouldDecodes;\n    // preserve j so it points to the start of newly added segments\n    for (; j < allSegments.length; j++) {\n      var segment = allSegments[j];\n      if (segment.type === 4 /* Epsilon */) {\n        continue;\n      }\n      isEmpty = false;\n      // Add a \"/\" for the new segment\n      currentState = currentState.put(47 /* SLASH */, false, false);\n      pattern += \"/\";\n      // Add a representation of the segment to the NFA and regex\n      currentState = eachChar[segment.type](segment, currentState);\n      pattern += regex[segment.type](segment);\n    }\n    handlers[i] = {\n      handler: route.handler,\n      names: names,\n      shouldDecodes: shouldDecodes\n    };\n  }\n  if (isEmpty) {\n    currentState = currentState.put(47 /* SLASH */, false, false);\n    pattern += \"/\";\n  }\n  currentState.handlers = handlers;\n  currentState.pattern = pattern + \"$\";\n  currentState.types = types;\n  var name;\n  if (typeof options === \"object\" && options !== null && options.as) {\n    name = options.as;\n  }\n  if (name) {\n    // if (this.names[name]) {\n    //   throw new Error(\"You may not add a duplicate route named `\" + name + \"`.\");\n    // }\n    this.names[name] = {\n      segments: allSegments,\n      handlers: handlers\n    };\n  }\n};\nRouteRecognizer.prototype.handlersFor = function handlersFor(name) {\n  var route = this.names[name];\n  if (!route) {\n    throw new Error(\"There is no route named \" + name);\n  }\n  var result = new Array(route.handlers.length);\n  for (var i = 0; i < route.handlers.length; i++) {\n    var handler = route.handlers[i];\n    result[i] = handler;\n  }\n  return result;\n};\nRouteRecognizer.prototype.hasRoute = function hasRoute(name) {\n  return !!this.names[name];\n};\nRouteRecognizer.prototype.generate = function generate$1(name, params) {\n  var route = this.names[name];\n  var output = \"\";\n  if (!route) {\n    throw new Error(\"There is no route named \" + name);\n  }\n  var segments = route.segments;\n  for (var i = 0; i < segments.length; i++) {\n    var segment = segments[i];\n    if (segment.type === 4 /* Epsilon */) {\n      continue;\n    }\n    output += \"/\";\n    output += generate[segment.type](segment, params);\n  }\n  if (output.charAt(0) !== \"/\") {\n    output = \"/\" + output;\n  }\n  if (params && params.queryParams) {\n    output += this.generateQueryString(params.queryParams);\n  }\n  return output;\n};\nRouteRecognizer.prototype.generateQueryString = function generateQueryString(params) {\n  var pairs = [];\n  var keys = Object.keys(params);\n  keys.sort();\n  for (var i = 0; i < keys.length; i++) {\n    var key = keys[i];\n    var value = params[key];\n    if (value == null) {\n      continue;\n    }\n    var pair = encodeURIComponent(key);\n    if (isArray(value)) {\n      for (var j = 0; j < value.length; j++) {\n        var arrayPair = key + \"[]\" + \"=\" + encodeURIComponent(value[j]);\n        pairs.push(arrayPair);\n      }\n    } else {\n      pair += \"=\" + encodeURIComponent(value);\n      pairs.push(pair);\n    }\n  }\n  if (pairs.length === 0) {\n    return \"\";\n  }\n  return \"?\" + pairs.join(\"&\");\n};\nRouteRecognizer.prototype.parseQueryString = function parseQueryString(queryString) {\n  var pairs = queryString.split(\"&\");\n  var queryParams = {};\n  for (var i = 0; i < pairs.length; i++) {\n    var pair = pairs[i].split(\"=\"),\n      key = decodeQueryParamPart(pair[0]),\n      keyLength = key.length,\n      isArray = false,\n      value = void 0;\n    if (pair.length === 1) {\n      value = \"true\";\n    } else {\n      // Handle arrays\n      if (keyLength > 2 && key.slice(keyLength - 2) === \"[]\") {\n        isArray = true;\n        key = key.slice(0, keyLength - 2);\n        if (!queryParams[key]) {\n          queryParams[key] = [];\n        }\n      }\n      value = pair[1] ? decodeQueryParamPart(pair[1]) : \"\";\n    }\n    if (isArray) {\n      queryParams[key].push(value);\n    } else {\n      queryParams[key] = value;\n    }\n  }\n  return queryParams;\n};\nRouteRecognizer.prototype.recognize = function recognize(path) {\n  var results;\n  var states = [this.rootState];\n  var queryParams = {};\n  var isSlashDropped = false;\n  var hashStart = path.indexOf(\"#\");\n  if (hashStart !== -1) {\n    path = path.substr(0, hashStart);\n  }\n  var queryStart = path.indexOf(\"?\");\n  if (queryStart !== -1) {\n    var queryString = path.substr(queryStart + 1, path.length);\n    path = path.substr(0, queryStart);\n    queryParams = this.parseQueryString(queryString);\n  }\n  if (path.charAt(0) !== \"/\") {\n    path = \"/\" + path;\n  }\n  var originalPath = path;\n  if (RouteRecognizer.ENCODE_AND_DECODE_PATH_SEGMENTS) {\n    path = normalizePath(path);\n  } else {\n    path = decodeURI(path);\n    originalPath = decodeURI(originalPath);\n  }\n  var pathLen = path.length;\n  if (pathLen > 1 && path.charAt(pathLen - 1) === \"/\") {\n    path = path.substr(0, pathLen - 1);\n    originalPath = originalPath.substr(0, originalPath.length - 1);\n    isSlashDropped = true;\n  }\n  for (var i = 0; i < path.length; i++) {\n    states = recognizeChar(states, path.charCodeAt(i));\n    if (!states.length) {\n      break;\n    }\n  }\n  var solutions = [];\n  for (var i$1 = 0; i$1 < states.length; i$1++) {\n    if (states[i$1].handlers) {\n      solutions.push(states[i$1]);\n    }\n  }\n  states = sortSolutions(solutions);\n  var state = solutions[0];\n  if (state && state.handlers) {\n    // if a trailing slash was dropped and a star segment is the last segment\n    // specified, put the trailing slash back\n    if (isSlashDropped && state.pattern && state.pattern.slice(-5) === \"(.+)$\") {\n      originalPath = originalPath + \"/\";\n    }\n    results = findHandler(state, originalPath, queryParams);\n  }\n  return results;\n};\nRouteRecognizer.VERSION = \"0.3.4\";\n// Set to false to opt-out of encoding and decoding path segments.\n// See https://github.com/tildeio/route-recognizer/pull/55\nRouteRecognizer.ENCODE_AND_DECODE_PATH_SEGMENTS = true;\nRouteRecognizer.Normalizer = {\n  normalizeSegment: normalizeSegment,\n  normalizePath: normalizePath,\n  encodePathSegment: encodePathSegment\n};\nRouteRecognizer.prototype.map = map;\nexport default RouteRecognizer;","map":{"version":3,"names":["createObject","Object","create","createMap","map","undefined","Target","path","matcher","delegate","to","target","callback","willAddRoute","add","length","Error","addChild","Matcher","routes","children","match","generateMatch","contextEntered","startingPath","fullPath","addRoute","routeArray","handler","len","i","substr","route","push","eachRoute","baseRoute","binding","paths","keys","slice","nested","call","addRouteCallback","normalizePath","split","normalizeSegment","join","SEGMENT_RESERVED_CHARS","segment","indexOf","decodeURIComponent","replace","encodeURIComponent","PATH_SEGMENT_ENCODINGS","encodePathSegment","str","escapeRegex","isArray","Array","hasOwnProperty","prototype","getParam","params","key","value","eachChar","currentState","state","ch","charCodeAt","put","_","regex","generate","RouteRecognizer","ENCODE_AND_DECODE_PATH_SEGMENTS","EmptyObject","freeze","EmptyArray","parse","segments","types","parts","names","shouldDecodes","part","flags","type","isEqualCharSpec","spec","char","negate","State","states","id","repeat","nextStates","pattern","_regex","handlers","regex$1","RegExp","get","child","this$1","child$1","returned","isMatch","sortSolutions","sort","a","b","ref","astatics","adynamics","astars","ref$1","bstatics","bdynamics","bstars","recognizeChar","l","concat","RecognizeResults","queryParams","splice","findHandler","originalPath","captures","currentCapture","result","isDynamic","j","name","capture","decodeQueryParamPart","error","rootState","options","allSegments","isEmpty","as","handlersFor","hasRoute","generate$1","output","charAt","generateQueryString","pairs","pair","arrayPair","parseQueryString","queryString","keyLength","recognize","results","isSlashDropped","hashStart","queryStart","decodeURI","pathLen","solutions","i$1","VERSION","Normalizer"],"sources":["C:\\Users\\Miguelzinho\\Documents\\Desenvolvedor\\Projeto\\Curso-Web-Full-Stack\\Front-End\\Projetos-React\\finance\\node_modules\\route-recognizer\\dist\\route-recognizer\\util.ts","C:\\Users\\Miguelzinho\\Documents\\Desenvolvedor\\Projeto\\Curso-Web-Full-Stack\\Front-End\\Projetos-React\\finance\\node_modules\\route-recognizer\\dist\\route-recognizer\\dsl.ts","C:\\Users\\Miguelzinho\\Documents\\Desenvolvedor\\Projeto\\Curso-Web-Full-Stack\\Front-End\\Projetos-React\\finance\\node_modules\\route-recognizer\\dist\\route-recognizer\\normalizer.ts","C:\\Users\\Miguelzinho\\Documents\\Desenvolvedor\\Projeto\\Curso-Web-Full-Stack\\Front-End\\Projetos-React\\finance\\node_modules\\route-recognizer\\dist\\route-recognizer.ts"],"sourcesContent":["const createObject = Object.create;\nexport function createMap<T>() {\n  const map: { [key: string]: T | undefined } = createObject(null);\n  map[\"__\"] = undefined;\n  delete map[\"__\"];\n  return map;\n}\n","import { createMap } from \"./util\";\n\nexport interface Delegate {\n  contextEntered?(context: string, route: MatchDSL): void;\n  willAddRoute?(context: string | undefined, route: string): string;\n}\n\nexport type Opaque = {} | void | null | undefined;\n\nexport interface Route {\n  path: string;\n  handler: Opaque;\n  queryParams?: string[];\n}\n\nexport interface RouteRecognizer {\n  delegate: Delegate | undefined;\n  add(routes: Route[]): void;\n}\n\nexport interface MatchCallback {\n  (match: MatchDSL): void;\n}\n\nexport interface MatchDSL {\n  (path: string): ToDSL;\n  (path: string, callback: MatchCallback): void;\n}\n\nexport interface ToDSL {\n  to(name: string, callback?: MatchCallback): void;\n}\n\nclass Target implements ToDSL {\n  path: string;\n  matcher: Matcher;\n  delegate: Delegate | undefined;\n\n  constructor(path: string, matcher: Matcher, delegate: Delegate | undefined) {\n    this.path = path;\n    this.matcher = matcher;\n    this.delegate = delegate;\n  }\n\n  to(target: string, callback: MatchCallback) {\n    let delegate = this.delegate;\n\n    if (delegate && delegate.willAddRoute) {\n      target = delegate.willAddRoute(this.matcher.target, target);\n    }\n\n    this.matcher.add(this.path, target);\n\n    if (callback) {\n      if (callback.length === 0) { throw new Error(\"You must have an argument in the function passed to `to`\"); }\n      this.matcher.addChild(this.path, target, callback, this.delegate);\n    }\n  }\n}\n\nexport class Matcher {\n  routes: {\n    [path: string]: string | undefined;\n  };\n  children: {\n    [path: string]: Matcher | undefined;\n  };\n  target: string | undefined;\n\n  constructor(target?: string) {\n    this.routes = createMap<string>();\n    this.children = createMap<Matcher>();\n    this.target = target;\n  }\n\n  add(path: string, target: string) {\n    this.routes[path] = target;\n  }\n\n  addChild(path: string, target: string, callback: MatchCallback, delegate: Delegate | undefined) {\n    let matcher = new Matcher(target);\n    this.children[path] = matcher;\n\n    let match = generateMatch(path, matcher, delegate);\n\n    if (delegate && delegate.contextEntered) {\n      delegate.contextEntered(target, match);\n    }\n\n    callback(match);\n  }\n}\n\nfunction generateMatch(startingPath: string, matcher: Matcher, delegate: Delegate | undefined): MatchDSL {\n  function match(path: string): ToDSL;\n  function match(path: string, callback: MatchCallback): void;\n  function match(path: string, callback?: MatchCallback): ToDSL | void {\n    let fullPath = startingPath + path;\n    if (callback) {\n      callback(generateMatch(fullPath, matcher, delegate));\n    } else {\n      return new Target(fullPath, matcher, delegate);\n    }\n  };\n  return match;\n}\n\nfunction addRoute(routeArray: Route[], path: string, handler: any) {\n  let len = 0;\n  for (let i = 0; i < routeArray.length; i++) {\n    len += routeArray[i].path.length;\n  }\n\n  path = path.substr(len);\n  let route = { path: path, handler: handler };\n  routeArray.push(route);\n}\n\nfunction eachRoute<T>(baseRoute: Route[], matcher: Matcher, callback: (this: T, routes: Route[]) => void, binding: T) {\n  let routes = matcher.routes;\n  let paths = Object.keys(routes);\n  for (let i = 0; i < paths.length; i++) {\n    let path = paths[i];\n    let routeArray = baseRoute.slice();\n    addRoute(routeArray, path, routes[path]);\n    let nested = matcher.children[path];\n    if (nested) {\n      eachRoute(routeArray, nested, callback, binding);\n    } else {\n      callback.call(binding, routeArray);\n    }\n  }\n}\n\nexport default function <T extends RouteRecognizer>(this: T, callback: MatchCallback, addRouteCallback?: (routeRecognizer: T, routes: Route[]) => void) {\n  let matcher = new Matcher();\n\n  callback(generateMatch(\"\", matcher, this.delegate));\n\n  eachRoute([], matcher, function(routes: Route[]) {\n    if (addRouteCallback) { addRouteCallback(this, routes); }\n    else { this.add(routes); }\n  }, this);\n}\n","// Normalizes percent-encoded values in `path` to upper-case and decodes percent-encoded\n// values that are not reserved (i.e., unicode characters, emoji, etc). The reserved\n// chars are \"/\" and \"%\".\n// Safe to call multiple times on the same path.\nexport function normalizePath(path: string): string {\n  return path.split(\"/\")\n             .map(normalizeSegment)\n             .join(\"/\");\n}\n\n// We want to ensure the characters \"%\" and \"/\" remain in percent-encoded\n// form when normalizing paths, so replace them with their encoded form after\n// decoding the rest of the path\nconst SEGMENT_RESERVED_CHARS = /%|\\//g;\nexport function normalizeSegment(segment: string) {\n  if (segment.length < 3 || segment.indexOf(\"%\") === -1) return segment;\n  return decodeURIComponent(segment).replace(SEGMENT_RESERVED_CHARS, encodeURIComponent);\n}\n\n// We do not want to encode these characters when generating dynamic path segments\n// See https://tools.ietf.org/html/rfc3986#section-3.3\n// sub-delims: \"!\", \"$\", \"&\", \"'\", \"(\", \")\", \"*\", \"+\", \",\", \";\", \"=\"\n// others allowed by RFC 3986: \":\", \"@\"\n//\n// First encode the entire path segment, then decode any of the encoded special chars.\n//\n// The chars \"!\", \"'\", \"(\", \")\", \"*\" do not get changed by `encodeURIComponent`,\n// so the possible encoded chars are:\n// ['%24', '%26', '%2B', '%2C', '%3B', '%3D', '%3A', '%40'].\nconst PATH_SEGMENT_ENCODINGS = /%(?:2(?:4|6|B|C)|3(?:B|D|A)|40)/g;\n\nexport function encodePathSegment(str: string) {\n  return encodeURIComponent(str).replace(PATH_SEGMENT_ENCODINGS, decodeURIComponent);\n}\n","import { createMap } from \"./route-recognizer/util\";\nimport map, { Delegate, Route, Opaque, MatchCallback } from \"./route-recognizer/dsl\";\nimport { normalizePath, normalizeSegment, encodePathSegment } from \"./route-recognizer/normalizer\";\nexport { Delegate, MatchCallback } from './route-recognizer/dsl';\n\nconst enum CHARS {\n  ANY = -1,\n  STAR = 42,\n  SLASH = 47,\n  COLON = 58\n}\n\nconst escapeRegex = /(\\/|\\.|\\*|\\+|\\?|\\||\\(|\\)|\\[|\\]|\\{|\\}|\\\\)/g;\n\nconst isArray = Array.isArray;\nconst hasOwnProperty = Object.prototype.hasOwnProperty;\n\nfunction getParam(params: Params | null | undefined, key: string): string {\n  if (typeof params !== \"object\" || params === null) {\n    throw new Error(\"You must pass an object as the second argument to `generate`.\");\n  }\n\n  if (!hasOwnProperty.call(params, key)) {\n    throw new Error(\"You must provide param `\" + key + \"` to `generate`.\");\n  }\n\n  let value = params[key];\n  let str = typeof value === \"string\" ? value : \"\" + value;\n  if (str.length === 0) {\n    throw new Error(\"You must provide a param `\" + key + \"`.\");\n  }\n  return str;\n}\n\nconst enum SegmentType {\n  Static  = 0,\n  Dynamic = 1,\n  Star    = 2,\n  Epsilon = 4\n}\n\nconst enum SegmentFlags {\n  Static  = 2 << SegmentType.Static,\n  Dynamic = 2 << SegmentType.Dynamic,\n  Star    = 2 << SegmentType.Star,\n  Epsilon = 2 << SegmentType.Epsilon,\n  Named = Dynamic | Star,\n  Decoded = Dynamic,\n  Counted = Static | Dynamic | Star\n}\n\nconst eachChar: ((segment: Segment, currentState: State) => State)[] = [];\neachChar[SegmentType.Static] = function (segment: Segment, currentState: State) {\n  let state = currentState;\n  let value = segment.value;\n  for (let i = 0; i < value.length; i++) {\n    let ch = value.charCodeAt(i);\n    state = state.put(ch, false, false);\n  }\n  return state;\n};\neachChar[SegmentType.Dynamic] = function (_: Segment, currentState: State) {\n  return currentState.put(CHARS.SLASH, true, true);\n};\neachChar[SegmentType.Star] = function (_: Segment, currentState: State) {\n  return currentState.put(CHARS.ANY, false, true);\n};\neachChar[SegmentType.Epsilon] = function (_: Segment, currentState: State) {\n  return currentState;\n};\n\nconst regex: ((segment: Segment) => string)[] = [];\nregex[SegmentType.Static] = function (segment: Segment) {\n  return segment.value.replace(escapeRegex, \"\\\\$1\");\n};\nregex[SegmentType.Dynamic] = function () {\n  return \"([^/]+)\";\n};\nregex[SegmentType.Star] = function () {\n  return \"(.+)\";\n};\nregex[SegmentType.Epsilon] = function () {\n  return \"\";\n};\n\nconst generate: ((segment: Segment, params?: Params | null) => string)[] = [];\ngenerate[SegmentType.Static] = function (segment: Segment) {\n  return segment.value;\n};\ngenerate[SegmentType.Dynamic] = function (segment: Segment, params?: Params) {\n  let value = getParam(params, segment.value);\n  if (RouteRecognizer.ENCODE_AND_DECODE_PATH_SEGMENTS) {\n    return encodePathSegment(value);\n  } else {\n    return value;\n  }\n};\ngenerate[SegmentType.Star] = function (segment: Segment, params?: Params) {\n  return getParam(params, segment.value);\n};\ngenerate[SegmentType.Epsilon] = function () {\n  return \"\";\n};\n\n// A Segment represents a segment in the original route description.\n// Each Segment type provides an `eachChar` and `regex` method.\n//\n// The `eachChar` method invokes the callback with one or more character\n// specifications. A character specification consumes one or more input\n// characters.\n//\n// The `regex` method returns a regex fragment for the segment. If the\n// segment is a dynamic of star segment, the regex fragment also includes\n// a capture.\n//\n// A character specification contains:\n//\n// * `validChars`: a String with a list of all valid characters, or\n// * `invalidChars`: a String with a list of all invalid characters\n// * `repeat`: true if the character specification can repeat\ninterface Segment {\n  type: SegmentType;\n  value: string;\n}\n\nexport interface Params {\n  [key: string]: Opaque;\n  [key: number]: Opaque;\n  queryParams?: QueryParams | null;\n}\n\ninterface PopulatedParsedHandlers {\n  names: string[];\n  shouldDecodes: any[];\n}\n\nconst EmptyObject = Object.freeze({});\ntype EmptyObject = Readonly<{}>\n\nconst EmptyArray = Object.freeze([]) as ReadonlyArray<any>;\ntype EmptyArray = ReadonlyArray<any>;\n\ninterface EmptyParsedHandlers {\n  names: EmptyArray;\n  shouldDecodes: EmptyArray;\n}\n\ntype ParsedHandler = PopulatedParsedHandlers | EmptyParsedHandlers;\n\n// The `names` will be populated with the paramter name for each dynamic/star\n// segment. `shouldDecodes` will be populated with a boolean for each dyanamic/star\n// segment, indicating whether it should be decoded during recognition.\nfunction parse(segments: Segment[], route: string, types: [number, number, number]) {\n  // normalize route as not starting with a \"/\". Recognition will\n  // also normalize.\n  if (route.length > 0 && route.charCodeAt(0) === CHARS.SLASH) { route = route.substr(1); }\n\n  let parts = route.split(\"/\");\n  let names: void | string[] = undefined;\n  let shouldDecodes: void | any[] = undefined;\n\n  for (let i = 0; i < parts.length; i++) {\n    let part = parts[i];\n    let flags: SegmentFlags = 0;\n    let type: SegmentType = 0;\n\n    if (part === \"\") {\n      type = SegmentType.Epsilon;\n    } else if (part.charCodeAt(0) === CHARS.COLON) {\n      type = SegmentType.Dynamic;\n    } else if (part.charCodeAt(0) === CHARS.STAR) {\n      type = SegmentType.Star;\n    }  else {\n      type = SegmentType.Static;\n    }\n\n    flags = 2 << type;\n\n    if (flags & SegmentFlags.Named) {\n      part = part.slice(1);\n      names = names || [];\n      names.push(part);\n\n      shouldDecodes = shouldDecodes || [];\n      shouldDecodes.push((flags & SegmentFlags.Decoded) !== 0);\n    }\n\n    if (flags & SegmentFlags.Counted) {\n      types[type]++;\n    }\n\n    segments.push({\n      type,\n      value: normalizeSegment(part)\n    });\n  }\n\n  return {\n    names: names || EmptyArray,\n    shouldDecodes: shouldDecodes || EmptyArray,\n  } as ParsedHandler;\n}\n\nfunction isEqualCharSpec(spec: CharSpec, char: number, negate: boolean) {\n  return spec.char === char && spec.negate === negate;\n}\n\ninterface EmptyHandler {\n  handler: Opaque;\n  names: EmptyArray;\n  shouldDecodes: EmptyArray;\n}\n\ninterface PopulatedHandler {\n  handler: Opaque;\n  names: string [];\n  shouldDecodes: boolean[];\n}\n\ntype Handler = EmptyHandler | PopulatedHandler;\n\n// A State has a character specification and (`charSpec`) and a list of possible\n// subsequent states (`nextStates`).\n//\n// If a State is an accepting state, it will also have several additional\n// properties:\n//\n// * `regex`: A regular expression that is used to extract parameters from paths\n//   that reached this accepting state.\n// * `handlers`: Information on how to convert the list of captures into calls\n//   to registered handlers with the specified parameters\n// * `types`: How many static, dynamic or star segments in this route. Used to\n//   decide which route to use if multiple registered routes match a path.\n//\n// Currently, State is implemented naively by looping over `nextStates` and\n// comparing a character specification against a character. A more efficient\n// implementation would use a hash of keys pointing at one or more next states.\nclass State implements CharSpec {\n  states: State[];\n  id: number;\n  negate: boolean;\n  char: number;\n  nextStates: number[] | number | null;\n  pattern: string;\n  _regex: RegExp | undefined;\n  handlers: Handler[] | undefined;\n  types: [number, number, number] | undefined;\n\n  constructor(states: State[], id: number, char: number, negate: boolean, repeat: boolean) {\n    this.states = states;\n    this.id = id;\n    this.char = char;\n    this.negate = negate;\n    this.nextStates = repeat ? id : null;\n    this.pattern = \"\";\n    this._regex = undefined;\n    this.handlers = undefined;\n    this.types = undefined;\n  }\n\n  regex(): RegExp {\n    if (!this._regex) {\n      this._regex = new RegExp(this.pattern);\n    }\n    return this._regex;\n  }\n\n  get(char: number, negate: boolean): State | void {\n    let nextStates = this.nextStates;\n    if (nextStates === null) return;\n    if (isArray(nextStates)) {\n      for (let i = 0; i < nextStates.length; i++) {\n        let child = this.states[nextStates[i]];\n        if (isEqualCharSpec(child, char, negate)) {\n          return child;\n        }\n      }\n    } else {\n      let child = this.states[nextStates];\n      if (isEqualCharSpec(child, char, negate)) {\n        return child;\n      }\n    }\n  }\n\n  put(char: number, negate: boolean, repeat: boolean) {\n    let state: State | void;\n\n    // If the character specification already exists in a child of the current\n    // state, just return that state.\n    if (state = this.get(char, negate)) { return state; }\n\n    // Make a new state for the character spec\n    let states = this.states;\n    state = new State(states, states.length, char, negate, repeat);\n    states[states.length] = state;\n\n    // Insert the new state as a child of the current state\n    if (this.nextStates == null) {\n      this.nextStates = state.id;\n    } else if (isArray(this.nextStates)) {\n      this.nextStates.push(state.id);\n    } else {\n      this.nextStates = [this.nextStates, state.id];\n    }\n\n    // Return the new state\n    return state;\n  }\n\n  // Find a list of child states matching the next character\n  match(ch: number): State[] {\n    let nextStates = this.nextStates;\n    if (!nextStates) return [];\n\n    let returned: State[] = [];\n    if (isArray(nextStates)) {\n      for (let i = 0; i < nextStates.length; i++) {\n        let child = this.states[nextStates[i]];\n\n        if (isMatch(child, ch)) {\n          returned.push(child);\n        }\n      }\n    } else {\n      let child = this.states[nextStates];\n      if (isMatch(child, ch)) {\n        returned.push(child);\n      }\n    }\n    return returned;\n  }\n}\n\nfunction isMatch(spec: CharSpec, char: number) {\n  return spec.negate ? spec.char !== char && spec.char !== CHARS.ANY : spec.char === char || spec.char === CHARS.ANY;\n}\n\n// This is a somewhat naive strategy, but should work in a lot of cases\n// A better strategy would properly resolve /posts/:id/new and /posts/edit/:id.\n//\n// This strategy generally prefers more static and less dynamic matching.\n// Specifically, it\n//\n//  * prefers fewer stars to more, then\n//  * prefers using stars for less of the match to more, then\n//  * prefers fewer dynamic segments to more, then\n//  * prefers more static segments to more\nfunction sortSolutions(states: State[]) {\n  return states.sort(function(a, b) {\n    let [ astatics, adynamics, astars ] = a.types || [0, 0, 0];\n    let [ bstatics, bdynamics, bstars ] = b.types || [0, 0, 0];\n    if (astars !== bstars) { return astars - bstars; }\n\n    if (astars) {\n      if (astatics !== bstatics) { return bstatics - astatics; }\n      if (adynamics !== bdynamics) { return bdynamics - adynamics; }\n    }\n\n    if (adynamics !== bdynamics) { return adynamics - bdynamics; }\n    if (astatics !== bstatics) { return bstatics - astatics; }\n\n    return 0;\n  });\n}\n\nfunction recognizeChar(states: State[], ch: number) {\n  let nextStates: State[] = [];\n\n  for (let i = 0, l = states.length; i < l; i++) {\n    let state = states[i];\n\n    nextStates = nextStates.concat(state.match(ch));\n  }\n\n  return nextStates;\n}\n\n\nexport interface QueryParams {\n  [param: string]: any[] | any | null | undefined;\n}\n\nexport interface Result {\n  handler: Opaque;\n  params: Params;\n  isDynamic: boolean;\n}\n\nexport interface Results extends ArrayLike<Result | undefined> {\n  queryParams: QueryParams;\n  slice(start?: number, end?: number): Result[];\n  splice(start: number, deleteCount: number, ...items: Result[]): Result[];\n  push(...results: Result[]): number;\n}\n\nclass RecognizeResults implements Results {\n  queryParams: QueryParams;\n  length = 0;\n  [index: number]: Result | undefined;\n  splice: (start: number, deleteCount: number, ...items: Result[]) => Result[];\n  slice: (start?: number, end?: number) => Result[];\n  push: (...results: Result[]) => number;\n\n  constructor(queryParams?: QueryParams) {\n    this.queryParams = queryParams || {};\n  }\n};\n\nRecognizeResults.prototype.splice = Array.prototype.splice;\nRecognizeResults.prototype.slice =  Array.prototype.slice;\nRecognizeResults.prototype.push = Array.prototype.push;\n\nfunction findHandler(state: State, originalPath: string, queryParams: QueryParams): Results {\n  let handlers = state.handlers;\n  let regex: RegExp = state.regex();\n  if (!regex || !handlers) throw new Error(\"state not initialized\");\n  let captures: RegExpMatchArray | null = originalPath.match(regex);\n  let currentCapture = 1;\n  let result = new RecognizeResults(queryParams);\n\n  result.length = handlers.length;\n\n  for (let i = 0; i < handlers.length; i++) {\n    let handler = handlers[i];\n    let names = handler.names;\n    let shouldDecodes = handler.shouldDecodes;\n    let params: EmptyObject | Params = EmptyObject;\n\n    let isDynamic = false;\n\n    if (names !== EmptyArray && shouldDecodes !== EmptyArray) {\n      for (let j = 0; j < names.length; j++) {\n        isDynamic = true;\n        let name = names[j];\n        let capture = captures && captures[currentCapture++];\n\n        if (params === EmptyObject) {\n          params = {};\n        }\n\n        if (RouteRecognizer.ENCODE_AND_DECODE_PATH_SEGMENTS && shouldDecodes[j]) {\n          (<Params>params)[name] = capture && decodeURIComponent(capture);\n        } else {\n          (<Params>params)[name] = capture;\n        }\n      }\n    }\n\n    result[i] = {\n      handler: handler.handler,\n      params,\n      isDynamic\n    };\n  }\n\n  return result;\n}\n\nfunction decodeQueryParamPart(part: string): string {\n  // http://www.w3.org/TR/html401/interact/forms.html#h-17.13.4.1\n  part = part.replace(/\\+/gm, \"%20\");\n  let result;\n  try {\n    result = decodeURIComponent(part);\n  } catch (error) {result = \"\"; }\n  return result;\n}\n\ninterface NamedRoute {\n  segments: Segment[];\n  handlers: Handler[];\n}\n\nclass RouteRecognizer {\n  private states: State[];\n  private rootState: State;\n  private names: {\n    [name: string]: NamedRoute | undefined;\n  } = createMap<NamedRoute>();\n  map: (context: MatchCallback, addCallback?: (router: this, routes: Route[]) => void) => void;\n  delegate: Delegate | undefined;\n\n  constructor() {\n    let states: State[] = [];\n    let state = new State(states, 0, CHARS.ANY, true, false);\n    states[0] = state;\n    this.states = states;\n    this.rootState = state;\n  }\n\n  static VERSION = \"0.3.4\";\n  // Set to false to opt-out of encoding and decoding path segments.\n  // See https://github.com/tildeio/route-recognizer/pull/55\n  static ENCODE_AND_DECODE_PATH_SEGMENTS = true;\n  static Normalizer = {\n    normalizeSegment, normalizePath, encodePathSegment\n  };\n\n  add(routes: Route[], options?: { as: string }) {\n    let currentState = this.rootState;\n    let pattern = \"^\";\n    let types: [number, number, number] = [0, 0, 0];\n    let handlers: Handler[] = new Array(routes.length);\n    let allSegments: Segment[] = [];\n\n    let isEmpty = true;\n    let j = 0;\n    for (let i = 0; i < routes.length; i++) {\n      let route = routes[i];\n      let { names, shouldDecodes } = parse(allSegments, route.path, types);\n\n      // preserve j so it points to the start of newly added segments\n      for (; j < allSegments.length; j++) {\n        let segment = allSegments[j];\n\n        if (segment.type === SegmentType.Epsilon) { continue; }\n\n        isEmpty = false;\n\n        // Add a \"/\" for the new segment\n        currentState = currentState.put(CHARS.SLASH, false, false);\n        pattern += \"/\";\n\n        // Add a representation of the segment to the NFA and regex\n        currentState = eachChar[segment.type](segment, currentState);\n        pattern += regex[segment.type](segment);\n      }\n      handlers[i] = {\n        handler: route.handler,\n        names,\n        shouldDecodes\n      };\n    }\n\n    if (isEmpty) {\n        currentState = currentState.put(CHARS.SLASH, false, false);\n      pattern += \"/\";\n    }\n\n    currentState.handlers = handlers;\n    currentState.pattern = pattern + \"$\";\n    currentState.types = types;\n\n    let name: string | undefined;\n    if (typeof options === \"object\" && options !== null && options.as) {\n      name = options.as;\n    }\n\n    if (name) {\n      // if (this.names[name]) {\n      //   throw new Error(\"You may not add a duplicate route named `\" + name + \"`.\");\n      // }\n\n      this.names[name] = {\n        segments: allSegments,\n        handlers\n      };\n    }\n  }\n\n  handlersFor(name: string) {\n    let route = this.names[name];\n\n    if (!route) { throw new Error(\"There is no route named \" + name); }\n\n    let result = new Array(route.handlers.length);\n\n    for (let i = 0; i < route.handlers.length; i++) {\n      let handler = route.handlers[i];\n      result[i] = handler;\n    }\n\n    return result;\n  }\n\n  hasRoute(name: string) {\n    return !!this.names[name];\n  }\n\n  generate(name: string, params?: Params | null) {\n    let route = this.names[name];\n    let output = \"\";\n    if (!route) { throw new Error(\"There is no route named \" + name); }\n\n    let segments: Segment[] = route.segments;\n\n    for (let i = 0; i < segments.length; i++) {\n      let segment: Segment = segments[i];\n\n      if (segment.type === SegmentType.Epsilon) {\n        continue;\n      }\n\n      output += \"/\";\n      output += generate[segment.type](segment, params);\n    }\n\n    if (output.charAt(0) !== \"/\") { output = \"/\" + output; }\n\n    if (params && params.queryParams) {\n      output += this.generateQueryString(params.queryParams);\n    }\n\n    return output;\n  }\n\n  generateQueryString(params: QueryParams) {\n    let pairs: string[] = [];\n    let keys: string[] = Object.keys(params);\n    keys.sort();\n    for (let i = 0; i < keys.length; i++) {\n      let key = keys[i];\n      let value = params[key];\n      if (value == null) {\n        continue;\n      }\n      let pair = encodeURIComponent(key);\n      if (isArray(value)) {\n        for (let j = 0; j < value.length; j++) {\n          let arrayPair = key + \"[]\" + \"=\" + encodeURIComponent(value[j]);\n          pairs.push(arrayPair);\n        }\n      } else {\n        pair += \"=\" + encodeURIComponent(value);\n        pairs.push(pair);\n      }\n    }\n\n    if (pairs.length === 0) { return \"\"; }\n\n    return \"?\" + pairs.join(\"&\");\n  }\n\n  parseQueryString(queryString: string): QueryParams {\n    let pairs = queryString.split(\"&\");\n    let queryParams: QueryParams = {};\n    for (let i = 0; i < pairs.length; i++) {\n      let pair      = pairs[i].split(\"=\"),\n          key       = decodeQueryParamPart(pair[0]),\n          keyLength = key.length,\n          isArray = false,\n          value;\n      if (pair.length === 1) {\n        value = \"true\";\n      } else {\n        // Handle arrays\n        if (keyLength > 2 && key.slice(keyLength - 2) === \"[]\") {\n          isArray = true;\n          key = key.slice(0, keyLength - 2);\n          if (!queryParams[key]) {\n            queryParams[key] = [];\n          }\n        }\n        value = pair[1] ? decodeQueryParamPart(pair[1]) : \"\";\n      }\n      if (isArray) {\n        (<string[]>queryParams[key]).push(value);\n      } else {\n        queryParams[key] = value;\n      }\n    }\n    return queryParams;\n  }\n\n  recognize(path: string): Results | undefined {\n    let results: Results | undefined;\n    let states: State[] = [ this.rootState ];\n    let queryParams = {};\n    let isSlashDropped = false;\n    let hashStart = path.indexOf(\"#\");\n    if (hashStart !== -1) {\n      path = path.substr(0, hashStart);\n    }\n\n    let queryStart = path.indexOf(\"?\");\n    if (queryStart !== -1) {\n      let queryString = path.substr(queryStart + 1, path.length);\n      path = path.substr(0, queryStart);\n      queryParams = this.parseQueryString(queryString);\n    }\n\n    if (path.charAt(0) !== \"/\") { path = \"/\" + path; }\n    let originalPath = path;\n\n    if (RouteRecognizer.ENCODE_AND_DECODE_PATH_SEGMENTS) {\n      path = normalizePath(path);\n    } else {\n      path = decodeURI(path);\n      originalPath = decodeURI(originalPath);\n    }\n\n    let pathLen = path.length;\n    if (pathLen > 1 && path.charAt(pathLen - 1) === \"/\") {\n      path = path.substr(0, pathLen - 1);\n      originalPath = originalPath.substr(0, originalPath.length - 1);\n      isSlashDropped = true;\n    }\n\n    for (let i = 0; i < path.length; i++) {\n      states = recognizeChar(states, path.charCodeAt(i));\n      if (!states.length) { break; }\n    }\n\n    let solutions: State[] = [];\n    for (let i = 0; i < states.length; i++) {\n      if (states[i].handlers) { solutions.push(states[i]); }\n    }\n\n    states = sortSolutions(solutions);\n\n    let state = solutions[0];\n\n    if (state && state.handlers) {\n      // if a trailing slash was dropped and a star segment is the last segment\n      // specified, put the trailing slash back\n      if (isSlashDropped && state.pattern && state.pattern.slice(-5) === \"(.+)$\") {\n        originalPath = originalPath + \"/\";\n      }\n      results = findHandler(state, originalPath, queryParams);\n    }\n\n    return results;\n  }\n}\n\nRouteRecognizer.prototype.map = map;\n\nexport default RouteRecognizer;\n\ninterface CharSpec {\n  negate: boolean;\n  char: number;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}